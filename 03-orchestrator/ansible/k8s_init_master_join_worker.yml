- name: Setup Kubernetes Master Node
  hosts: k8smain01
  become: yes
  remote_user: debian
  tasks:

    - name: Enable IP forwarding for Kubernetes
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Initialize Kubernetes with kubeadm
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket unix:///run/containerd/containerd.sock
      register: kubeadm_init_output
      changed_when: "'Your Kubernetes control-plane has initialized successfully!' in kubeadm_init_output.stdout"

- name: Setup Kubernetes config as debian user
  hosts: k8smain01
  become: yes
  become_user: debian
  remote_user: debian
  tasks:
    - name: Create .kube directory
      ansible.builtin.command:
        cmd: "mkdir -p $HOME/.kube"
      environment:
        HOME: "{{ ansible_env.HOME }}"  # Ensure $HOME is set correctly

    - name: Copy Kubernetes admin.conf to .kube/config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0644'
        remote_src: true
      become: yes
      become_user: root

    - name: Change ownership of .kube/config
      ansible.builtin.shell: "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
      environment:
        HOME: "{{ ansible_env.HOME }}"

    - name: Apply sysctl settings for Kubernetes CRI
      become: true
      become_user: root
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
      notify:
        - Reload sysctl  # Notify the handler

    - name: Set iptables alternatives
      ansible.builtin.command:
        cmd: update-alternatives --config iptables
        creates: /etc/alternatives/iptables

    - name: Install Calico Tigera operator manifest
      ansible.builtin.command:
        cmd: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/tigera-operator.yaml
        creates: /etc/kubernetes/pki/ca.crt  # Check if Calico operator is already applied

    - name: Download Calico custom resources manifest
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.29.0/manifests/custom-resources.yaml
        dest: /tmp/custom-resources.yaml

    - name: Apply Calico custom resources manifest
      ansible.builtin.command:
        cmd: kubectl create -f /tmp/custom-resources.yaml
        creates: /etc/kubernetes/pki/ca.crt  # Check if custom resources are applied

    - name: Get Worker Join Token
      command: kubeadm token create --print-join-command
      register: join_token

- name: Join Worker Nodes to Kubernetes
  hosts: k8sworker01
  remote_user: debian
  become: true
  tasks:
    - name: Join Kubernetes cluster
      command: "{{ hostvars['k8smain01'].join_token.stdout }}"
      ignore_errors: yes  # Ignores errors if the node is already joined

  # Correct place for the handler definition
  handlers:
    - name: Reload sysctl
      ansible.builtin.sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'
        state: present
        reload: yes
